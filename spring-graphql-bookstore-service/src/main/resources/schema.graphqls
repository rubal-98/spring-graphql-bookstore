schema {
    query: Query
    mutation: Mutation
}

type Query {
    searchBookById(id: ID!): Book
    authors: [Author!]!
}

type Mutation {
    addAuthor(author: AuthorIn!): AddAuthorResult
    addBook(book: BookIn!): Book
}

union AddAuthorResult = Author | AddAuthorError

type Book {
    id: ID!
    name: String!
    isbn: String!
    year: Int!
    pages: Int!
    author: Author!
    tags: [Tag!]!
    price: Int!
    updatedOn: String!
    stats: BookStats
}

input BookIn {
    name: String!
    isbn: String!
    year: Int!
    pages: Int!
    author: ID!
    tags: [Tag!]!
    price: Int!
    copies: Int!
}

type BookStats {
    id: ID!
    copies: Int!
    purchases: Int!
    lends: Int!
    likes: Int!
}

type Author {
    id: ID!
    firstName: String!
    lastName: String!
}

input AuthorIn {
    firstName: String!
    lastName: String!
}

type Customer {
    id: ID!
    firstName: String!
    lastName: String!
    purchases: [Purchase!]!
    lendings: [Lending!]!
    likes: [Book!]!
}

type Purchase {
    id: ID!
    book: Book!
    purchasedOn: String!
}

type Lending {
    id: ID!
    book: Book!
    dueOn: String!
}

enum Tag {
    FICTION
    POLITICS
    ROMANCE
    THRILLER
}

type AddAuthorError {
    message: String!
    status: Int!
}
